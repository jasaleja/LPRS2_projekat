/*
 * SI_main.c
 *
 *  Created on: 16.06.2015.
 *      Authors: Nenad Pekez, Sasa Talosi
 */

#include "SI_logic.h"
#include "SI_interrupt.h"
#include <stdlib.h>

int main()
{
	/*************************/
	/* VARIABLES DECLARATION */
	/*************************/

	Xuint8 i, j;
	Xuint8 spaceship_dir;
	Xuint8 invader_x;

	Xuint8* row;
	Xuint8* invader_dir;
	Xuint8* invader_dir_chng;

	/* temp variables */
	int old_lives = 0, old_invaders_num = 0, old_level = 0;
	int score = 0, old_score = 0;
	char* str = NULL;

    /************************/
    /***** MAIN PROGRAM *****/
    /************************/

	init_platform();
	init_interrupt_controller();
	init_colors();

	clear_text_screen(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR);

	while(1)
	{
		clear_graphics_screen(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR);

		/* Menu */
		VGA_PERIPH_MEM_mWriteMemory(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + 0x04, 0b01);    //text mode

		set_cursor(8125);
		print_string(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, "PRESS KEY LEFT TO START", strlen("PRESS KEY LEFT TO START"));

		while(input != RIGHT_JOY)	//wait for input from user
		{
			seed++;
		}
		srand(seed);
		/********/

		VGA_PERIPH_MEM_mWriteMemory(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + 0x04, 0b11);	//display and text mode
		set_cursor(666);
		clear_text_screen(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR);
		print_string(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, "SCORE", strlen("SCORE"));

		set_cursor(688);
		num_to_str(str, 0, num_len(0));
		print_string(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, str, strlen(str));

		set_cursor(710);
		print_string(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, "LIVES", strlen("LIVES"));

		set_cursor(732);
		num_to_str(str, lives, num_len(lives));
		print_string(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, str, strlen(str));

		set_cursor(800);
		print_string(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, "LEVEL", strlen("LEVEL"));

		game_over = 0;
		level = 0;
		print_level = 0;
		score = 0;
		old_score = 0;

		while(!game_over)
		{
			print_level++;

			if(level < 4)
			{
				level++;
			}

			old_score += score;

			row = (Xuint8*) malloc((INIT_ROWS+level-1)*sizeof(Xuint8));
			invader_dir = (Xuint8*) malloc((INIT_ROWS+level-1)*sizeof(Xuint8));
			invader_dir_chng = (Xuint8*) malloc((INIT_ROWS+level-1)*sizeof(Xuint8));

			init_variables(&spaceship_dir, invader_dir, invader_dir_chng, row);
			generate_init_invaders_positions();
			init_draw(row);

			while((invaders_num > 0) && (game_over == 0))
			{
				switch(input)
				{
					case LEFT_JOY:
							spaceship_dir = LEFT;
							break;

					case RIGHT_JOY:
							spaceship_dir = RIGHT;
							break;

					case MIDDLE_JOY:
							if(shoot_flag == 0)
							{
								shoot_projectile_from_ship(spaceship_x);
								shoot_flag = SHOOT_SPEED;
							}
							break;
				}

				if(spaceship_flag)	//time to move spaceship
				{
					move_spaceship(&spaceship_dir);
					spaceship_flag = 0;
				}

				if(projectil_flag)	//time to move projectiles
				{
					move_projectile_from_ship();
					move_projectile_from_invader();
					projectil_flag = 0;
				}

				if(invader_shoot_flag)
				{
					invader_x = rand()%80;
					shoot_projectile_from_invader(invader_x, row);
					invader_shoot_flag = 0;
				}

				for(i = 0; i < INIT_ROWS + level - 1; i++)
				{
					if(flag_row[i])	//time to move this row of invaders?
					{
						if(invader_dir_chng[i] == DOWN)	//time to move rows down?
						{
							invader_dir_chng[i]++;
							move_invaders_down(row, i);
						}
						else							//if not, move rows left/right
							move_invaders_row(row, invader_dir, invader_dir_chng, i);

						flag_row[i] = 0;
					}
				}

				if(old_invaders_num != invaders_num)
				{
					set_cursor(688);
					score = (INIT_NUM + INIT_COLS*(level-1) - invaders_num)*10;
					num_to_str(str, score + old_score, num_len(score + old_score));
					print_string(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, str, strlen(str));
					old_invaders_num = invaders_num;
				}

				if(old_lives != lives)
				{
					set_cursor(732);
					num_to_str(str, lives, num_len(lives));
					print_string(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, str, strlen(str));
					old_lives = lives;
				}

				if(old_level != print_level)
				{
					set_cursor(800 + 22);
					num_to_str(str, print_level, num_len(print_level));
					print_string(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, str, strlen(str));
					old_level = print_level;
				}
			}

			free(row);
			free(invader_dir);
			free(invader_dir_chng);
		}

		VGA_PERIPH_MEM_mWriteMemory(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + 0x04, 0b01);    //text mode
		clear_text_screen(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR);

		if(game_over)
		{
			set_cursor(3660);
			print_string(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, "GAME OVER", 9);

			set_cursor(6530);
			print_string(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, "SCORE", 5);

			set_cursor(6530 + 22);
			num_to_str(str, score + old_score, num_len(score + old_score));
			print_string(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, str, num_len(score + old_score));
		}
	}

    return 0;
}

